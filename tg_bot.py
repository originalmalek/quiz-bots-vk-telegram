import logging
import os

import telebot
import redis as rdb

from dotenv import load_dotenv
from telegram_logger import MyLogsHandler
from get_questions import create_questions_and_answer_dict
from random import randint


telegram_access_token = os.getenv('TELEGRAM_TOKEN')
tg_bot = telebot.TeleBot(telegram_access_token)

logger = logging.getLogger('TG')


def send_message_tg(text, chat_id):
    tg_bot.send_message(chat_id, text)


def show_buttons(chat_id):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    new_question_button = telebot.types.KeyboardButton('–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚ùì')
    get_answer_button = telebot.types.KeyboardButton('–°–¥–∞—Ç—å—Å—è ü§î')
    my_scores_button = telebot.types.KeyboardButton('–ú–æ–π —Å—á–µ—Ç üìä')
    markup.row(new_question_button, get_answer_button)
    markup.row(my_scores_button)

    tg_bot.send_message(text='–ù–∞–∂–º–∏ "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"', chat_id=chat_id, reply_markup=markup)


@tg_bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    redis.set(f'tg-{message.chat.id}', 0)
    send_message_tg('–≠—Ç–æ –±–æ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. –ò–≥—Ä–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ.', message.chat.id)
    show_buttons(message.chat.id)


@tg_bot.message_handler(regexp='–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å')
def send_question(message):
    if int(redis.get(f'tg-{message.chat.id}')) > 0:
        send_message_tg('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å—Å—è".',
                        message.chat.id)
        return None
    questions_id = randint(1, len(questions))
    redis.set(f'tg-{message.chat.id}', questions_id)
    send_message_tg(questions[questions_id]['question'], message.chat.id)


@tg_bot.message_handler(regexp='—Å–¥–∞—Ç—å—Å—è')
def send_answer(message):
    questions_id = int(redis.get(f'tg-{message.chat.id}'))
    if questions_id == 0:
        send_message_tg('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"', message.chat.id)
        return None
    redis.set(f'tg-{message.chat.id}', 0)
    answer = questions[questions_id]['answer']
    send_message_tg(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{answer}', message.chat.id)


@tg_bot.message_handler(regexp='–º–æ–π —Å—á–µ—Ç')
def send_scores(message):
    send_message_tg('–í–∞—à —Å—á–µ—Ç: 777. –í—ã –º–æ–ª–æ–¥–µ—Ü!', message.chat.id)


@tg_bot.message_handler(content_types='text')
def check_answer(message):
    questions_id = int(redis.get(f'tg-{message.chat.id}'))
    if questions_id == 0:
        send_message_tg('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞! –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å".', message.chat.id)
        return None
    answer = questions[questions_id]['answer'].split(sep='.')[0]
    if len(message.text) <= 3:
        send_message_tg('–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', message.chat.id)
        return None
    if message.text.lower() in answer.lower():
        redis.set(f'tg-{message.chat.id}', 0)
        send_message_tg(f'–í—ã —É–≥–∞–¥–∞–ª–∏!\n–¢–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}.\n–î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:"',
                        message.chat.id)
    else:
        send_message_tg(text='–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', chat_id=message.chat.id)


if __name__ == '__main__':
    load_dotenv()
    redis_host = os.getenv('REDIS_HOST')
    redis_pass = os.getenv('REDIS_PASS')

    logging.basicConfig(level=20)
    logger.addHandler(MyLogsHandler())

    redis = rdb.Redis(host=redis_host, password=redis_pass, port=16097)
    questions = create_questions_and_answer_dict()

    while True:
        try:
            logger.warning('Bot TG is working')
            tg_bot.polling(none_stop=True)
        except Exception as err:
            logger.error('Bot TG got an error')
            logger.error(err, exc_info=True)
